1
SELECT product_id
from Products p
WHERE p.low_fats LIKE 'Y' AND p.recyclable LIKE 'Y'


2
SELECT name
from Customer
where referee_id <> 2 OR referee_id IS NULL;


3
select name, population, area
from World
where population > 25000000 or area > 3000000


4
select distinct author_id as id
from views
where author_id=viewer_id
order by id


5
select tweet_id from Tweets t
where length(t.content) > 15


6
select unique_id, e.name
from Employees e
LEFT JOIN EmployeeUNI ON e.id = EmployeeUNI.id
order by e.name ASC


7
SELECT p.product_name, s.year, s.price
FROM Product p
JOIN Sales as s ON p.product_id = s.product_id


8
SELECT v.customer_id, COUNT(*) as count_no_trans
FROM Visits v
LEFT JOIN Transactions t ON v.visit_id = t.visit_id
WHERE t.visit_id IS null
GROUP BY v.customer_id


9
SELECT w1.id
FROM Weather w1
JOIN Weather w2 ON w1.recordDate = w2.recordDate+1
WHERE w2.temperature < w1.temperature


10
SELECT starts.machine_id, ROUND(AVG(ends.end_timestamp - starts.start_timestamp)::NUMERIC, 3) as processing_time
FROM (SELECT machine_id, process_id, timestamp AS start_timestamp FROM Activity WHERE activity_type = 'start') AS starts
JOIN (SELECT machine_id, process_id, timestamp AS end_timestamp FROM Activity WHERE activity_type = 'end') AS ends
ON starts.machine_id = ends.machine_id AND starts.process_id = ends.process_id
GROUP BY 1


11
SELECT name, bonus
FROM Employee
LEFT JOIN Bonus ON Employee.empId = Bonus.empId
WHERE bonus < 1000 or bonus IS NULL


12
SELECT ss.student_id, ss.student_name, ss.subject_name, COUNT(e.subject_name) AS attended_exams
FROM (
    SELECT  s.student_id, s.student_name, sub.subject_name
    FROM students s
    CROSS JOIN Subjects sub
) ss
LEFT JOIN Examinations e ON ss.student_id = e.student_id
AND ss.subject_name = e.subject_name
GROUP BY ss.student_id, ss.student_name, ss.subject_name 


13
SELECT e.name
FROM Employee e
JOIN (
    SELECT managerID
    FROM Employee
    WHERE managerId IS NOT NULL
    GROUP BY managerId
    HAVING COUNT(*) > 4
) as mgr ON e.id = mgr.managerId


14
SELECT
  s.user_id,
  COALESCE(
  ROUND(
    1.0 * SUM(CASE WHEN c.action = 'confirmed' THEN 1 ELSE 0 END) / 
    NULLIF(COUNT(c.action), 0),
    2
  ),
  0.00
) AS confirmation_rate
FROM Signups s
LEFT JOIN Confirmations c
  ON s.user_id = c.user_id
GROUP BY s.user_id
ORDER BY s.user_id;


15
SELECT id, movie, c.description, rating
FROM Cinema c
WHERE id % 2 = 1 AND c.description <> 'boring'
ORDER BY rating DESC


16
SELECT 
  p.product_id, 
  COALESCE(ROUND(
    COALESCE(SUM(p.price * u.units), 0) * 1.0 / NULLIF(SUM(u.units), 0), 
    2
  ), 0) AS average_price
FROM Prices p
LEFT JOIN UnitsSold u 
  ON u.product_id = p.product_id
  AND u.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY p.product_id;


17 (1075)
SELECT project_id, ROUND(SUM(e.experience_years) * 1.0 / COUNT(e.employee_id), 2) as average_years
FROM Project p
JOIN Employee e ON p.employee_id = e.employee_id
GROUP BY project_id
ORDER BY project_id ASC


18
SELECT r.contest_id, ROUND( COUNT(DISTINCT r.user_id) * 100.0 / (SELECT COUNT(*) FROM Users), 2) as percentage
FROM Register r
GROUP BY r.contest_id
ORDER BY percentage DESC, r.contest_id ASC


19

